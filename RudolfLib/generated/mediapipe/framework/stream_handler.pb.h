// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: mediapipe/framework/stream_handler.proto
// Protobuf C++ Version: 5.29.5

#ifndef mediapipe_2fframework_2fstream_5fhandler_2eproto_2epb_2eh
#define mediapipe_2fframework_2fstream_5fhandler_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029005
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "mediapipe/framework/mediapipe_options.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fstream_5fhandler_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fframework_2fstream_5fhandler_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_mediapipe_2fframework_2fstream_5fhandler_2eproto;
namespace mediapipe {
class InputStreamHandlerConfig;
struct InputStreamHandlerConfigDefaultTypeInternal;
extern InputStreamHandlerConfigDefaultTypeInternal _InputStreamHandlerConfig_default_instance_;
class OutputStreamHandlerConfig;
struct OutputStreamHandlerConfigDefaultTypeInternal;
extern OutputStreamHandlerConfigDefaultTypeInternal _OutputStreamHandlerConfig_default_instance_;
}  // namespace mediapipe
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace mediapipe {

// ===================================================================


// -------------------------------------------------------------------

class OutputStreamHandlerConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mediapipe.OutputStreamHandlerConfig) */ {
 public:
  inline OutputStreamHandlerConfig() : OutputStreamHandlerConfig(nullptr) {}
  ~OutputStreamHandlerConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(OutputStreamHandlerConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(OutputStreamHandlerConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OutputStreamHandlerConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline OutputStreamHandlerConfig(const OutputStreamHandlerConfig& from) : OutputStreamHandlerConfig(nullptr, from) {}
  inline OutputStreamHandlerConfig(OutputStreamHandlerConfig&& from) noexcept
      : OutputStreamHandlerConfig(nullptr, std::move(from)) {}
  inline OutputStreamHandlerConfig& operator=(const OutputStreamHandlerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputStreamHandlerConfig& operator=(OutputStreamHandlerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutputStreamHandlerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputStreamHandlerConfig* internal_default_instance() {
    return reinterpret_cast<const OutputStreamHandlerConfig*>(
        &_OutputStreamHandlerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(OutputStreamHandlerConfig& a, OutputStreamHandlerConfig& b) { a.Swap(&b); }
  inline void Swap(OutputStreamHandlerConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputStreamHandlerConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutputStreamHandlerConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<OutputStreamHandlerConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OutputStreamHandlerConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OutputStreamHandlerConfig& from) { OutputStreamHandlerConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(OutputStreamHandlerConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mediapipe.OutputStreamHandlerConfig"; }

 protected:
  explicit OutputStreamHandlerConfig(::google::protobuf::Arena* arena);
  OutputStreamHandlerConfig(::google::protobuf::Arena* arena, const OutputStreamHandlerConfig& from);
  OutputStreamHandlerConfig(::google::protobuf::Arena* arena, OutputStreamHandlerConfig&& from) noexcept
      : OutputStreamHandlerConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInputSidePacketFieldNumber = 2,
    kOutputStreamHandlerFieldNumber = 1,
    kOptionsFieldNumber = 3,
  };
  // repeated string input_side_packet = 2;
  int input_side_packet_size() const;
  private:
  int _internal_input_side_packet_size() const;

  public:
  void clear_input_side_packet() ;
  const std::string& input_side_packet(int index) const;
  std::string* mutable_input_side_packet(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_input_side_packet(int index, Arg_&& value, Args_... args);
  std::string* add_input_side_packet();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_input_side_packet(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& input_side_packet() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_input_side_packet();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_input_side_packet() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_input_side_packet();

  public:
  // optional string output_stream_handler = 1 [default = "InOrderOutputStreamHandler"];
  bool has_output_stream_handler() const;
  void clear_output_stream_handler() ;
  const std::string& output_stream_handler() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_output_stream_handler(Arg_&& arg, Args_... args);
  std::string* mutable_output_stream_handler();
  PROTOBUF_NODISCARD std::string* release_output_stream_handler();
  void set_allocated_output_stream_handler(std::string* value);

  private:
  const std::string& _internal_output_stream_handler() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_stream_handler(
      const std::string& value);
  std::string* _internal_mutable_output_stream_handler();

  public:
  // optional .mediapipe.MediaPipeOptions options = 3;
  bool has_options() const;
  void clear_options() ;
  const ::mediapipe::MediaPipeOptions& options() const;
  PROTOBUF_NODISCARD ::mediapipe::MediaPipeOptions* release_options();
  ::mediapipe::MediaPipeOptions* mutable_options();
  void set_allocated_options(::mediapipe::MediaPipeOptions* value);
  void unsafe_arena_set_allocated_options(::mediapipe::MediaPipeOptions* value);
  ::mediapipe::MediaPipeOptions* unsafe_arena_release_options();

  private:
  const ::mediapipe::MediaPipeOptions& _internal_options() const;
  ::mediapipe::MediaPipeOptions* _internal_mutable_options();

  public:
  // @@protoc_insertion_point(class_scope:mediapipe.OutputStreamHandlerConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      82, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OutputStreamHandlerConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> input_side_packet_;
    static const ::google::protobuf::internal::LazyString _i_give_permission_to_break_this_code_default_output_stream_handler_;
    ::google::protobuf::internal::ArenaStringPtr output_stream_handler_;
    ::mediapipe::MediaPipeOptions* options_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mediapipe_2fframework_2fstream_5fhandler_2eproto;
};
// -------------------------------------------------------------------

class InputStreamHandlerConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mediapipe.InputStreamHandlerConfig) */ {
 public:
  inline InputStreamHandlerConfig() : InputStreamHandlerConfig(nullptr) {}
  ~InputStreamHandlerConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(InputStreamHandlerConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(InputStreamHandlerConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InputStreamHandlerConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline InputStreamHandlerConfig(const InputStreamHandlerConfig& from) : InputStreamHandlerConfig(nullptr, from) {}
  inline InputStreamHandlerConfig(InputStreamHandlerConfig&& from) noexcept
      : InputStreamHandlerConfig(nullptr, std::move(from)) {}
  inline InputStreamHandlerConfig& operator=(const InputStreamHandlerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputStreamHandlerConfig& operator=(InputStreamHandlerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputStreamHandlerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputStreamHandlerConfig* internal_default_instance() {
    return reinterpret_cast<const InputStreamHandlerConfig*>(
        &_InputStreamHandlerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(InputStreamHandlerConfig& a, InputStreamHandlerConfig& b) { a.Swap(&b); }
  inline void Swap(InputStreamHandlerConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputStreamHandlerConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputStreamHandlerConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<InputStreamHandlerConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InputStreamHandlerConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const InputStreamHandlerConfig& from) { InputStreamHandlerConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(InputStreamHandlerConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mediapipe.InputStreamHandlerConfig"; }

 protected:
  explicit InputStreamHandlerConfig(::google::protobuf::Arena* arena);
  InputStreamHandlerConfig(::google::protobuf::Arena* arena, const InputStreamHandlerConfig& from);
  InputStreamHandlerConfig(::google::protobuf::Arena* arena, InputStreamHandlerConfig&& from) noexcept
      : InputStreamHandlerConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInputStreamHandlerFieldNumber = 1,
    kOptionsFieldNumber = 3,
  };
  // optional string input_stream_handler = 1 [default = "DefaultInputStreamHandler"];
  bool has_input_stream_handler() const;
  void clear_input_stream_handler() ;
  const std::string& input_stream_handler() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_input_stream_handler(Arg_&& arg, Args_... args);
  std::string* mutable_input_stream_handler();
  PROTOBUF_NODISCARD std::string* release_input_stream_handler();
  void set_allocated_input_stream_handler(std::string* value);

  private:
  const std::string& _internal_input_stream_handler() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_stream_handler(
      const std::string& value);
  std::string* _internal_mutable_input_stream_handler();

  public:
  // optional .mediapipe.MediaPipeOptions options = 3;
  bool has_options() const;
  void clear_options() ;
  const ::mediapipe::MediaPipeOptions& options() const;
  PROTOBUF_NODISCARD ::mediapipe::MediaPipeOptions* release_options();
  ::mediapipe::MediaPipeOptions* mutable_options();
  void set_allocated_options(::mediapipe::MediaPipeOptions* value);
  void unsafe_arena_set_allocated_options(::mediapipe::MediaPipeOptions* value);
  ::mediapipe::MediaPipeOptions* unsafe_arena_release_options();

  private:
  const ::mediapipe::MediaPipeOptions& _internal_options() const;
  ::mediapipe::MediaPipeOptions* _internal_mutable_options();

  public:
  // @@protoc_insertion_point(class_scope:mediapipe.InputStreamHandlerConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      63, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const InputStreamHandlerConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    static const ::google::protobuf::internal::LazyString _i_give_permission_to_break_this_code_default_input_stream_handler_;
    ::google::protobuf::internal::ArenaStringPtr input_stream_handler_;
    ::mediapipe::MediaPipeOptions* options_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mediapipe_2fframework_2fstream_5fhandler_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// InputStreamHandlerConfig

// optional string input_stream_handler = 1 [default = "DefaultInputStreamHandler"];
inline bool InputStreamHandlerConfig::has_input_stream_handler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void InputStreamHandlerConfig::clear_input_stream_handler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.input_stream_handler_.ClearToDefault(::mediapipe::InputStreamHandlerConfig::Impl_::_i_give_permission_to_break_this_code_default_input_stream_handler_, GetArena());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InputStreamHandlerConfig::input_stream_handler() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mediapipe.InputStreamHandlerConfig.input_stream_handler)
  if (_impl_.input_stream_handler_.IsDefault()) {
    return Impl_::_i_give_permission_to_break_this_code_default_input_stream_handler_.get();
  }
  return _internal_input_stream_handler();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InputStreamHandlerConfig::set_input_stream_handler(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.input_stream_handler_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mediapipe.InputStreamHandlerConfig.input_stream_handler)
}
inline std::string* InputStreamHandlerConfig::mutable_input_stream_handler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_input_stream_handler();
  // @@protoc_insertion_point(field_mutable:mediapipe.InputStreamHandlerConfig.input_stream_handler)
  return _s;
}
inline const std::string& InputStreamHandlerConfig::_internal_input_stream_handler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.input_stream_handler_.Get();
}
inline void InputStreamHandlerConfig::_internal_set_input_stream_handler(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.input_stream_handler_.Set(value, GetArena());
}
inline std::string* InputStreamHandlerConfig::_internal_mutable_input_stream_handler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.input_stream_handler_.Mutable(::mediapipe::InputStreamHandlerConfig::Impl_::_i_give_permission_to_break_this_code_default_input_stream_handler_, GetArena());
}
inline std::string* InputStreamHandlerConfig::release_input_stream_handler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mediapipe.InputStreamHandlerConfig.input_stream_handler)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  return _impl_.input_stream_handler_.Release();
}
inline void InputStreamHandlerConfig::set_allocated_input_stream_handler(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.input_stream_handler_.SetAllocated(value, GetArena());
  // @@protoc_insertion_point(field_set_allocated:mediapipe.InputStreamHandlerConfig.input_stream_handler)
}

// optional .mediapipe.MediaPipeOptions options = 3;
inline bool InputStreamHandlerConfig::has_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.options_ != nullptr);
  return value;
}
inline const ::mediapipe::MediaPipeOptions& InputStreamHandlerConfig::_internal_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mediapipe::MediaPipeOptions* p = _impl_.options_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::MediaPipeOptions&>(::mediapipe::_MediaPipeOptions_default_instance_);
}
inline const ::mediapipe::MediaPipeOptions& InputStreamHandlerConfig::options() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mediapipe.InputStreamHandlerConfig.options)
  return _internal_options();
}
inline void InputStreamHandlerConfig::unsafe_arena_set_allocated_options(::mediapipe::MediaPipeOptions* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.options_);
  }
  _impl_.options_ = reinterpret_cast<::mediapipe::MediaPipeOptions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.InputStreamHandlerConfig.options)
}
inline ::mediapipe::MediaPipeOptions* InputStreamHandlerConfig::release_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mediapipe::MediaPipeOptions* released = _impl_.options_;
  _impl_.options_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mediapipe::MediaPipeOptions* InputStreamHandlerConfig::unsafe_arena_release_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mediapipe.InputStreamHandlerConfig.options)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mediapipe::MediaPipeOptions* temp = _impl_.options_;
  _impl_.options_ = nullptr;
  return temp;
}
inline ::mediapipe::MediaPipeOptions* InputStreamHandlerConfig::_internal_mutable_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.options_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mediapipe::MediaPipeOptions>(GetArena());
    _impl_.options_ = reinterpret_cast<::mediapipe::MediaPipeOptions*>(p);
  }
  return _impl_.options_;
}
inline ::mediapipe::MediaPipeOptions* InputStreamHandlerConfig::mutable_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::mediapipe::MediaPipeOptions* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:mediapipe.InputStreamHandlerConfig.options)
  return _msg;
}
inline void InputStreamHandlerConfig::set_allocated_options(::mediapipe::MediaPipeOptions* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.options_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.options_ = reinterpret_cast<::mediapipe::MediaPipeOptions*>(value);
  // @@protoc_insertion_point(field_set_allocated:mediapipe.InputStreamHandlerConfig.options)
}

// -------------------------------------------------------------------

// OutputStreamHandlerConfig

// optional string output_stream_handler = 1 [default = "InOrderOutputStreamHandler"];
inline bool OutputStreamHandlerConfig::has_output_stream_handler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void OutputStreamHandlerConfig::clear_output_stream_handler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.output_stream_handler_.ClearToDefault(::mediapipe::OutputStreamHandlerConfig::Impl_::_i_give_permission_to_break_this_code_default_output_stream_handler_, GetArena());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OutputStreamHandlerConfig::output_stream_handler() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mediapipe.OutputStreamHandlerConfig.output_stream_handler)
  if (_impl_.output_stream_handler_.IsDefault()) {
    return Impl_::_i_give_permission_to_break_this_code_default_output_stream_handler_.get();
  }
  return _internal_output_stream_handler();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OutputStreamHandlerConfig::set_output_stream_handler(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.output_stream_handler_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mediapipe.OutputStreamHandlerConfig.output_stream_handler)
}
inline std::string* OutputStreamHandlerConfig::mutable_output_stream_handler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_output_stream_handler();
  // @@protoc_insertion_point(field_mutable:mediapipe.OutputStreamHandlerConfig.output_stream_handler)
  return _s;
}
inline const std::string& OutputStreamHandlerConfig::_internal_output_stream_handler() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.output_stream_handler_.Get();
}
inline void OutputStreamHandlerConfig::_internal_set_output_stream_handler(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.output_stream_handler_.Set(value, GetArena());
}
inline std::string* OutputStreamHandlerConfig::_internal_mutable_output_stream_handler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.output_stream_handler_.Mutable(::mediapipe::OutputStreamHandlerConfig::Impl_::_i_give_permission_to_break_this_code_default_output_stream_handler_, GetArena());
}
inline std::string* OutputStreamHandlerConfig::release_output_stream_handler() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mediapipe.OutputStreamHandlerConfig.output_stream_handler)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  return _impl_.output_stream_handler_.Release();
}
inline void OutputStreamHandlerConfig::set_allocated_output_stream_handler(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.output_stream_handler_.SetAllocated(value, GetArena());
  // @@protoc_insertion_point(field_set_allocated:mediapipe.OutputStreamHandlerConfig.output_stream_handler)
}

// repeated string input_side_packet = 2;
inline int OutputStreamHandlerConfig::_internal_input_side_packet_size() const {
  return _internal_input_side_packet().size();
}
inline int OutputStreamHandlerConfig::input_side_packet_size() const {
  return _internal_input_side_packet_size();
}
inline void OutputStreamHandlerConfig::clear_input_side_packet() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.input_side_packet_.Clear();
}
inline std::string* OutputStreamHandlerConfig::add_input_side_packet() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_input_side_packet()->Add();
  // @@protoc_insertion_point(field_add_mutable:mediapipe.OutputStreamHandlerConfig.input_side_packet)
  return _s;
}
inline const std::string& OutputStreamHandlerConfig::input_side_packet(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mediapipe.OutputStreamHandlerConfig.input_side_packet)
  return _internal_input_side_packet().Get(index);
}
inline std::string* OutputStreamHandlerConfig::mutable_input_side_packet(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mediapipe.OutputStreamHandlerConfig.input_side_packet)
  return _internal_mutable_input_side_packet()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void OutputStreamHandlerConfig::set_input_side_packet(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_input_side_packet()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:mediapipe.OutputStreamHandlerConfig.input_side_packet)
}
template <typename Arg_, typename... Args_>
inline void OutputStreamHandlerConfig::add_input_side_packet(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_input_side_packet(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:mediapipe.OutputStreamHandlerConfig.input_side_packet)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
OutputStreamHandlerConfig::input_side_packet() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mediapipe.OutputStreamHandlerConfig.input_side_packet)
  return _internal_input_side_packet();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
OutputStreamHandlerConfig::mutable_input_side_packet() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mediapipe.OutputStreamHandlerConfig.input_side_packet)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_input_side_packet();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
OutputStreamHandlerConfig::_internal_input_side_packet() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.input_side_packet_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
OutputStreamHandlerConfig::_internal_mutable_input_side_packet() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.input_side_packet_;
}

// optional .mediapipe.MediaPipeOptions options = 3;
inline bool OutputStreamHandlerConfig::has_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.options_ != nullptr);
  return value;
}
inline const ::mediapipe::MediaPipeOptions& OutputStreamHandlerConfig::_internal_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mediapipe::MediaPipeOptions* p = _impl_.options_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::MediaPipeOptions&>(::mediapipe::_MediaPipeOptions_default_instance_);
}
inline const ::mediapipe::MediaPipeOptions& OutputStreamHandlerConfig::options() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mediapipe.OutputStreamHandlerConfig.options)
  return _internal_options();
}
inline void OutputStreamHandlerConfig::unsafe_arena_set_allocated_options(::mediapipe::MediaPipeOptions* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.options_);
  }
  _impl_.options_ = reinterpret_cast<::mediapipe::MediaPipeOptions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.OutputStreamHandlerConfig.options)
}
inline ::mediapipe::MediaPipeOptions* OutputStreamHandlerConfig::release_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mediapipe::MediaPipeOptions* released = _impl_.options_;
  _impl_.options_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mediapipe::MediaPipeOptions* OutputStreamHandlerConfig::unsafe_arena_release_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mediapipe.OutputStreamHandlerConfig.options)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mediapipe::MediaPipeOptions* temp = _impl_.options_;
  _impl_.options_ = nullptr;
  return temp;
}
inline ::mediapipe::MediaPipeOptions* OutputStreamHandlerConfig::_internal_mutable_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.options_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mediapipe::MediaPipeOptions>(GetArena());
    _impl_.options_ = reinterpret_cast<::mediapipe::MediaPipeOptions*>(p);
  }
  return _impl_.options_;
}
inline ::mediapipe::MediaPipeOptions* OutputStreamHandlerConfig::mutable_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::mediapipe::MediaPipeOptions* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:mediapipe.OutputStreamHandlerConfig.options)
  return _msg;
}
inline void OutputStreamHandlerConfig::set_allocated_options(::mediapipe::MediaPipeOptions* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.options_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.options_ = reinterpret_cast<::mediapipe::MediaPipeOptions*>(value);
  // @@protoc_insertion_point(field_set_allocated:mediapipe.OutputStreamHandlerConfig.options)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // mediapipe_2fframework_2fstream_5fhandler_2eproto_2epb_2eh
