// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: FaceResult.proto
// Protobuf C++ Version: 5.29.5

#include "FaceResult.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace rudolf {

inline constexpr FaceResult::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : nose_x_{0},
        nose_y_{0},
        confidence_{0},
        face_found_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FaceResult::FaceResult(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FaceResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FaceResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FaceResultDefaultTypeInternal() {}
  union {
    FaceResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FaceResultDefaultTypeInternal _FaceResult_default_instance_;
}  // namespace rudolf
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_FaceResult_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_FaceResult_2eproto = nullptr;
const ::uint32_t
    TableStruct_FaceResult_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rudolf::FaceResult, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rudolf::FaceResult, _impl_.nose_x_),
        PROTOBUF_FIELD_OFFSET(::rudolf::FaceResult, _impl_.nose_y_),
        PROTOBUF_FIELD_OFFSET(::rudolf::FaceResult, _impl_.confidence_),
        PROTOBUF_FIELD_OFFSET(::rudolf::FaceResult, _impl_.face_found_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::rudolf::FaceResult)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::rudolf::_FaceResult_default_instance_._instance,
};
const char descriptor_table_protodef_FaceResult_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\020FaceResult.proto\022\006rudolf\"T\n\nFaceResult"
    "\022\016\n\006nose_x\030\001 \001(\002\022\016\n\006nose_y\030\002 \001(\002\022\022\n\nconf"
    "idence\030\003 \001(\002\022\022\n\nface_found\030\004 \001(\010b\006proto3"
};
static ::absl::once_flag descriptor_table_FaceResult_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_FaceResult_2eproto = {
    false,
    false,
    120,
    descriptor_table_protodef_FaceResult_2eproto,
    "FaceResult.proto",
    &descriptor_table_FaceResult_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_FaceResult_2eproto::offsets,
    file_level_enum_descriptors_FaceResult_2eproto,
    file_level_service_descriptors_FaceResult_2eproto,
};
namespace rudolf {
// ===================================================================

class FaceResult::_Internal {
 public:
};

FaceResult::FaceResult(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rudolf.FaceResult)
}
FaceResult::FaceResult(
    ::google::protobuf::Arena* arena, const FaceResult& from)
    : FaceResult(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE FaceResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void FaceResult::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, nose_x_),
           0,
           offsetof(Impl_, face_found_) -
               offsetof(Impl_, nose_x_) +
               sizeof(Impl_::face_found_));
}
FaceResult::~FaceResult() {
  // @@protoc_insertion_point(destructor:rudolf.FaceResult)
  SharedDtor(*this);
}
inline void FaceResult::SharedDtor(MessageLite& self) {
  FaceResult& this_ = static_cast<FaceResult&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* FaceResult::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) FaceResult(arena);
}
constexpr auto FaceResult::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(FaceResult),
                                            alignof(FaceResult));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull FaceResult::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_FaceResult_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &FaceResult::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<FaceResult>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &FaceResult::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<FaceResult>(), &FaceResult::ByteSizeLong,
            &FaceResult::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(FaceResult, _impl_._cached_size_),
        false,
    },
    &FaceResult::kDescriptorMethods,
    &descriptor_table_FaceResult_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* FaceResult::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> FaceResult::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rudolf::FaceResult>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool face_found = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(FaceResult, _impl_.face_found_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(FaceResult, _impl_.face_found_)}},
    // float nose_x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(FaceResult, _impl_.nose_x_)}},
    // float nose_y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(FaceResult, _impl_.nose_y_)}},
    // float confidence = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(FaceResult, _impl_.confidence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float nose_x = 1;
    {PROTOBUF_FIELD_OFFSET(FaceResult, _impl_.nose_x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float nose_y = 2;
    {PROTOBUF_FIELD_OFFSET(FaceResult, _impl_.nose_y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float confidence = 3;
    {PROTOBUF_FIELD_OFFSET(FaceResult, _impl_.confidence_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool face_found = 4;
    {PROTOBUF_FIELD_OFFSET(FaceResult, _impl_.face_found_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void FaceResult::Clear() {
// @@protoc_insertion_point(message_clear_start:rudolf.FaceResult)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.nose_x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.face_found_) -
      reinterpret_cast<char*>(&_impl_.nose_x_)) + sizeof(_impl_.face_found_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* FaceResult::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const FaceResult& this_ = static_cast<const FaceResult&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* FaceResult::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const FaceResult& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:rudolf.FaceResult)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float nose_x = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_nose_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_nose_x(), target);
          }

          // float nose_y = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_nose_y()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_nose_y(), target);
          }

          // float confidence = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_confidence()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_confidence(), target);
          }

          // bool face_found = 4;
          if (this_._internal_face_found() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_face_found(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:rudolf.FaceResult)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t FaceResult::ByteSizeLong(const MessageLite& base) {
          const FaceResult& this_ = static_cast<const FaceResult&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t FaceResult::ByteSizeLong() const {
          const FaceResult& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:rudolf.FaceResult)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float nose_x = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_nose_x()) != 0) {
              total_size += 5;
            }
            // float nose_y = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_nose_y()) != 0) {
              total_size += 5;
            }
            // float confidence = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_confidence()) != 0) {
              total_size += 5;
            }
            // bool face_found = 4;
            if (this_._internal_face_found() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void FaceResult::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FaceResult*>(&to_msg);
  auto& from = static_cast<const FaceResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rudolf.FaceResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_nose_x()) != 0) {
    _this->_impl_.nose_x_ = from._impl_.nose_x_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_nose_y()) != 0) {
    _this->_impl_.nose_y_ = from._impl_.nose_y_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_confidence()) != 0) {
    _this->_impl_.confidence_ = from._impl_.confidence_;
  }
  if (from._internal_face_found() != 0) {
    _this->_impl_.face_found_ = from._impl_.face_found_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FaceResult::CopyFrom(const FaceResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rudolf.FaceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FaceResult::InternalSwap(FaceResult* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FaceResult, _impl_.face_found_)
      + sizeof(FaceResult::_impl_.face_found_)
      - PROTOBUF_FIELD_OFFSET(FaceResult, _impl_.nose_x_)>(
          reinterpret_cast<char*>(&_impl_.nose_x_),
          reinterpret_cast<char*>(&other->_impl_.nose_x_));
}

::google::protobuf::Metadata FaceResult::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace rudolf
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_FaceResult_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
